# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Data from AniList"""
type Anilist {
  banner: String
  imageLarge: String!
  imageMedium: String!
  title: String!
  url: String!
}

type Anime {
  anidbId: Int
  anilist: Anilist
  entries(all: Boolean): [Entry!]!

  """AniList ID"""
  id: Int!
  malScore: Float
  names: [String!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Entry {
  accepted: Boolean!
  anime: Anime!
  createdAt: DateTime!
  episode: Int!
  fileName: String!
  group: Group!
  hash: String!
  id: ID!
  images: [Image!]!
  source: String!
  sourceUri: String!
  updatedAt: DateTime!
}

type Group {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Image {
  createdAt: DateTime!
  fileName: String!
  id: ID!
  timestamp: Timestamp!
  updatedAt: DateTime!
}

type Job {
  anime: Anime!
  createdAt: DateTime!
  episode: Int!
  fileName: String!
  group: Group!
  hash: String!

  """A mapping for `hash`, useful in caching"""
  id: ID!
  inProgress: Boolean!
  source: String!
  sourceUri: String!
  timestamps: [Timestamp!]!
}

type JobPage {
  items: [Job!]!
  nextOffset: Int
  total: Int!
}

type Mutation {
  confirmWorker(token: String!): Boolean!
  createJob(animeId: Int!, fileName: String, group: String, source: String!, timestamps: [Timestamp!]): Job!
  deleteEntry(id: ID!): Boolean!
  registerWorker(name: String!): String!
}

type Query {
  anime(id: Int!): Anime
  entries(animeId: Float!): [Entry!]!
  jobQueue(
    """Maximum 20"""
    limit: Int = 20
    offset: Int = 0
  ): JobPage!
  recentlyAdded: [Entry!]!
  searchGroups(query: String): [Group!]!
  searchTorrents(query: String!): [Torrent!]!
  torrentFiles(magnetUri: String!): [String!]!
  workers: [Worker!]!
}

"""A timestamp in the format `[HH:]MM:SS[.xxxx]`"""
scalar Timestamp

type Torrent {
  id: ID!
  leechers: Int!
  magnetUri: String!
  name: String
  seeders: Int!
  sizeMb: Int!
}

type Worker {
  confirmed: Boolean!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}
